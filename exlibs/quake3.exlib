# Copyright 2016 Nadal Gonzalo Garc√≠a Zavala <snorkellingcactus@gmail.com>
# Distributed under the terms of the GNU General Public License v2

myexparam	MAKE_PREFIX=.
myexparam	RENDERERS=
myexparam	DEFAULT_RENDERER=
myexparam	BUILD_GAME_SO=0
myexparam	BASEQ3_PATH=[ baseq3 ]

# The bin suffix is used to prevent a build error
# where the binary name is equal to a directory name.
			CLI_BIN_SUFFIX=-client
			SRV_BIN_SUFFIX=-server

exparam -v MY_MAKE_PREFIX		MAKE_PREFIX
exparam -v MY_RENDERERS			RENDERERS
exparam -v MY_DEFAULT_RENDERER	DEFAULT_RENDERER
exparam -v MY_BUILD_GAME_SO		BUILD_GAME_SO
exparam -v MY_BASEQ3_PATH		BASEQ3_PATH[@]

require doinsmv

export_exlib_phases src_{prepare,compile,install}

MYOPTIONS='
    mumble [[
		description = [ Use Mumble instead of the built-in Speex-based VoIP ]
    ]]
    fb [[ description = [
    		Framebuffer and GLSL support for things like rotoscope effect
    	]
    ]]
    smp [[ description = [
    		Separate game logic in a thread and renderer stuffs in another ( most for old video cards ). Supported only on the client.
    	]
    ]]
    ( providers: ijg-jpeg jpeg-turbo ) [[ number-selected = exactly-one ]]
    (
    	data	[[ description = [ Install the game data.	] ]]
    	engine	[[ description = [ Build the engine.		] ]]
    	server	[[ description = [ Build the game server.	] ]]
    ) [[ number-selected = at-least-one ]]
    
    platform:
    	x86
    	amd64
'

DEPENDENCIES="
    build:
	   app-arch/unzip
    build+run:
        engine? (
            media-libs/SDL:=[>=1.2]
            media-libs/libogg
            media-libs/openal
            media-libs/opusfile
            media-libs/speex
            media-libs/speexdsp
            x11-dri/glu
            x11-dri/mesa
            x11-libs/libX11
            x11-libs/libXext
        )
    	
        net-misc/curl
        sys-libs/zlib
        mumble? ( voip/mumble )
        
        providers:ijg-jpeg? ( media-libs/jpeg:= )
        providers:jpeg-turbo? ( media-libs/libjpeg-turbo )
"

DEFAULT_SRC_COMPILE_PARAMS+=(
	BUILD_RENDERER_OPENGL2=1    # build newer renderer
	BUILD_STANDALONE=1
#	BUILD_BASEGAME=0            # the following four variables control building of non-essential
	                            # stuff: Quake VMs, libraries, building for 3rd party mods.
	BUILD_GAME_QVM=0

	BUILD_MISSIONPACK=0
	FULLBINEXT=""
	GENERATE_DEPENDENCIES=0     # do not add -MMD for the preprocessor
	NO_STRIP=1                  # let us do the stripping
	OPTIMIZE=""                 # do add more optimization CFLAGS
	OPTIMIZEVM=""               # see above
	USE_CURL_DLOPEN=0           # *_DLOPEN: do not link at runtime
	USE_INTERNAL_JPEG=0
	USE_INTERNAL_VORBIS=0
	USE_INTERNAL_OGG=0
	USE_INTERNAL_OPUS=0
	USE_INTERNAL_SPEEX=0
	USE_INTERNAL_ZLIB=0
	USE_LOCAL_HEADERS=0         # do not use headers local to ioq3 instead of system ones
	USE_OPENAL_DLOPEN=0
	USE_RENDERER_DLOPEN=0
	USE_FREETYPE=1
	V=1                         # show cc command line when building
	release                     # only build release target, do not build debug target
)

function dogamebin() {

    local BIN_NAME=${PN}$1
    local BIN="${INST}"/${BIN_NAME}

	if optionq data
	then
		BIN_NAME="${TEMP}"/${BIN_NAME}

		local BASEPATH
		if [ "${MY_BUILD_GAME_SO}" = "0" ]
		then
			BASEPATH="${DATA}"
		else
			BASEPATH="${INST}"
		fi

        echo -e '#!/bin/sh'"\n${BIN} "'+set fs_basepath "'${BASEPATH}'" "$@"' > "${BIN_NAME}"

        dobin "${BIN_NAME}"
#    else
#        dosym "${BIN}" /usr/$( exhost --target )/bin/${BIN_NAME}
    fi
}

quake3_src_prepare()
{
	default

	edo sed -i -r "s/pkg-config/$( exhost --tool-prefix )pkg\-config/g" ${MY_MAKE_PREFIX}/Makefile
}

quake3_src_compile(){

	if optionq server || optionq engine
	then
		DEFAULT_SRC_COMPILE_PARAMS+=(
			BUILD_SERVER=$(					option server	1 0	)
			BUILD_CLIENT=$(					option engine	1 0	)
			BUILD_CLIENT_SMP=$( 			option smp		1 0	)
			BUILD_GAME_SO=${MY_BUILD_GAME_SO}
			BUILD_BASEGAME=${MY_BUILD_GAME_SO}
			FRAMEBUFFER_AND_GLSL_SUPPORT=$( option fb		1 0	)
			USE_MUMBLE=$(					option mumble	1 0	)
#			USE_VOIP=$(						option voip		1 0	)
            CLIENTBIN=${PN}${CLI_BIN_SUFFIX}
            SERVERBIN=${PN}${SRV_BIN_SUFFIX}
		)

		ARCH='x86'
		optionq platform:amd64 && ARCH='x86_64'

		emake -C ${MY_MAKE_PREFIX} ${DEFAULT_SRC_COMPILE_PARAMS[@]} ARCH=${ARCH} PLATFORM=linux
	fi
}

quake3_src_install()
{
	if optionq data
	then
		local	DATA=/usr/share/games/${PN}/

		insinto ${DATA}
			doinsmv "${MY_BASEQ3_PATH[@]}"
	fi
	if optionq server || optionq engine
	then
		local	OUT_DIR=${MY_MAKE_PREFIX}/build/release-linux-${ARCH}/
		local	OUT=${OUT_DIR}/${PN}
		local	INST=/usr/$( exhost --target )/share/games/${PN}

		dodir /usr/$( exhost --target )/bin

		exeinto ${INST}

			if optionq server
			then
				doexe ${OUT}${SRV_BIN_SUFFIX}
				dogamebin ${SRV_BIN_SUFFIX}
			fi

			if optionq engine
			then
				newexe ${OUT}${CLI_BIN_SUFFIX}${MY_DEFAULT_RENDERER} ${PN}
				dogamebin

				for RENDERER in ${MY_RENDERERS[@]}
				do
					newexe ${OUT}${CLI_BIN_SUFFIX}_${RENDERER} ${PN}${RENDERER}
					dogamebin ${RENDERER}
				done
			fi

		if [ "${MY_BUILD_GAME_SO}" != "0" ]
		then
			echo "for b in ${MY_BASEQ3_PATH[@]}"
			for b in ${MY_BASEQ3_PATH[@]}
			do
				local BASE_NAME=$( basename "${b}" )
				local BASE_TGT=${INST}/${BASE_NAME}
				local BASE_DATA=${DATA}/${BASE_NAME}

				dodir ${BASE_TGT}

				exeinto ${BASE_TGT}
					doexe $( find ${OUT_DIR} -name '*.so' -printf '%p ' )

				for d in "${IMAGE}"${BASE_DATA}/*
				do
					dosym "../../../../../${BASE_DATA#/usr}/$( basename ${d} )" ${BASE_TGT}
				done
			done
		fi
	fi
}