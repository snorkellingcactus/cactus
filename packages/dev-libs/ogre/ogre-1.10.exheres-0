# Copyright 2016 Nadal Gonzalo Garc√≠a Zavala <snorkellingcactus@gmail.com>
# Copyright 2008, 2009, 2011 Daniel Mierswa <impulze@impulze.org>
# Distributed under the terms of the GNU General Public License v2

require cmake [ api=2 ]

SUMMARY="OGRE (Object-Oriented Graphics Rendering Engine)"
DESCRIPTION="
OGRE (Object-Oriented Graphics Rendering Engine) is a
scene-oriented, flexible 3D engine written in C++ designed to make it easier
and more intuitive for developers to produce applications utilising
hardware-accelerated 3D graphics
"
HOMEPAGE="http://ogre3d.org"
DOWNLOADS="https://bitbucket.org/sinbad/${PN}/get/v${PV//./-}.tar.bz2 -> ${PNV}.tar.bz2"

LICENCES="MIT"
SLOT="0"
PLATFORMS="~amd64"
MYOPTIONS="
    archives  [[ description = [ Provide functionality to use ZIP resource locations ] ]]
    boost     [[ description = [ Build Property component and use Boost for Threads ] ]]
    cg        [[ description = [ Create a Plug-In for NVIDIA C for Graphics ] ]]
    doc
    examples  [[ description = [ Build and install OGRE demos ] ]]
    freeimage [[ description = [ Cover a wide range of image formats where images can be
                                 loaded ] ]]
    ois
    opengl    [[ description = [ Build the OpenGL and OpenGL ES rendering system ] ]]
"

DEPENDENCIES="
    build+run:
        dev-libs/tinyxml
        media-libs/freetype:2
        x11-libs/libX11
        x11-libs/libXaw
        x11-libs/libXrandr
        x11-libs/libXt
        archives? (
            dev-libs/zziplib
            sys-libs/zlib
        )
        boost? ( dev-libs/boost )
        cg? ( x11-libs/Cg )
        examples?   ( dev-games/ois )
        ois?        ( dev-games/ois )
        freeimage? ( media-libs/FreeImage )
        opengl? ( x11-dri/mesa )
    test:
        dev-cpp/cppunit
"

# 1.9.0 - Tests require ogre built with OPTION archives
RESTRICT="test"

CMAKE_SOURCE=${WORKBASE}/sinbad-${PN}-d1fd73368d5d

DEFAULT_SRC_PREPARE_PATCHES=(
#    "${FILES}"/${PNV}-Fix-build-without-samples.patch
)

# - TBB, POCO can also be used as thread implementations
#   look at those at some time
# - doxygen is executed automatically if found, should probably
#   only be executed if option doc is enabled
# - 1.9.0 - GLES(1) rendersystems fails to build
src_configure() {
    local cmakeargs=(
        -DOGRE_BUILD_RENDERSYSTEM_GLES:BOOL=FALSE
        -DOGRE_BUILD_TESTS:BOOL=$(expecting_tests && echo TRUE || echo FALSE)
        -DOGRE_BUILD_TOOLS:BOOL=TRUE
        -DOGRE_CONFIG_THREAD_PROVIDER:STRING=$(option boost && echo boost)
        -DOGRE_CONFIG_THREADS:STRING=$(option boost && echo 2 || echo 0)
    )

    ecmake \
        "${cmakeargs[@]}" \
        $(cmake_option archives OGRE_CONFIG_ENABLE_ZIP) \
        $(cmake_option boost OGRE_BUILD_COMPONENT_PROPERTY) \
        $(cmake_option boost OGRE_USE_BOOST) \
        $(cmake_option cg OGRE_BUILD_PLUGIN_CG) \
        $(cmake_option doc OGRE_INSTALL_DOCS) \
        $(cmake_option examples OGRE_BUILD_SAMPLES) \
        $(cmake_option examples OGRE_INSTALL_SAMPLES) \
        $(cmake_option freeimage OGRE_CONFIG_ENABLE_FREEIMAGE) \
        $(cmake_option opengl OGRE_BUILD_RENDERSYSTEM_GL) \
        $(cmake_option opengl OGRE_BUILD_RENDERSYSTEM_GLES2)
}

src_test() {
    edo ./bin/Test_Ogre
}

