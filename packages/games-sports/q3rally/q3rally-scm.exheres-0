# Copyright 2016 Nadal Gonzalo Garc√≠a Zavala <snorkellingcactus@gmail.com>

SCM_SVN_RAW_URI=1
SCM_REPOSITORY='svn://svn.code.sf.net/p/q3rallysa/code/'

require scm-svn

SUMMARY='A quake3 based rally and shooting game.'
HOMEPAGE='http://www.q3rally.com/'
PLATFORMS='x86 amd64'
LICENCES='GPL-2 Quake3-EULA'
SLOT='0'

MYOPTIONS='
    mumble [[
	description = [ Use Mumble instead of the built-in Speex-based VoIP ]
    ]]
    ( providers: ijg-jpeg jpeg-turbo ) [[ number-selected = exactly-one ]]
    (
    	server	[[ description = [ Build the game server.	] ]]
	    engine	[[ description = [ Build the engine.		] ]]
	    data	[[ description = [ Install the game data.	] ]]
    ) [[ number-selected = at-least-one ]]
    
    platform:
    	x86
    	amd64
'

DEPENDENCIES="
    build:
	app-arch/unzip
    build+run:
	media-libs/SDL:=[>=1.2]
        media-libs/libogg
        media-libs/openal
        media-libs/opusfile
        media-libs/speex
        media-libs/speexdsp
        net-misc/curl
        sys-libs/zlib
        x11-dri/glu
        x11-dri/mesa
        x11-libs/libX11
        x11-libs/libXext
        mumble? ( voip/mumble )
        providers:ijg-jpeg? ( media-libs/jpeg:= )
        providers:jpeg-turbo? ( media-libs/libjpeg-turbo )
"

DEFAULT_SRC_COMPILE_PARAMS=(
    BUILD_RENDERER_OPENGL2=1    # build newer renderer
    BUILD_STANDALONE=1
    BUILD_BASEGAME=0            # the following four variables control building of non-essential
                                # stuff: Quake VMs, libraries, building for 3rd party mods.
    BUILD_GAME_QVM=0
    BUILD_GAME_SO=0
    BUILD_MISSIONPACK=0
    COPYBINDIR="${IMAGE}"/usr/$(exhost --target)/bin
    DEFAULT_BASEDIR=/usr/share/games/${PN}
    FULLBINEXT=""
    GENERATE_DEPENDENCIES=0     # do not add -MMD for the preprocessor
    NO_STRIP=1                  # let us do the stripping
    OPTIMIZE=""                 # do add more optimization CFLAGS
    OPTIMIZEVM=""               # see above
    USE_CURL_DLOPEN=0           # *_DLOPEN: do not link at runtime
    USE_INTERNAL_JPEG=0
    USE_INTERNAL_OGG=0
    USE_INTERNAL_OPUS=0
    USE_INTERNAL_SPEEX=0
    USE_INTERNAL_ZLIB=0
    USE_LOCAL_HEADERS=0         # do not use headers local to ioq3 instead of system ones
    USE_OPENAL_DLOPEN=0
    USE_RENDERER_DLOPEN=0
    V=1                         # show cc command line when building
    release                     # only build release target, do not build debug target
)

src_prepare()
{
	default

	edo sed -i -r "s/pkg-config/$(exhost --target)\-pkg\-config/g" engine/Makefile
}

src_compile(){

	if optionq server || optionq engine
	then
		DEFAULT_SRC_COMPILE_PARAMS+=(
			BUILD_SERVER=$( option server 1 0 )
			BUILD_CLIENT=$( option engine 1 0 )
		)

		ARCH='i686'
		optionq platform:amd64 && ARCH='x86_64'

		emake -C engine ${DEFAULT_SRC_COMPILE_PARAMS[@]} ARCH=${ARCH} PLATFORM=linux
	fi
}

function dogamebin() {

	local BIN_NAME=${PN}$1
	local BIN="${INST}"/${BIN_NAME}

	if optionq data
	then
		BIN_NAME="${TEMP}"/${BIN_NAME}

		echo -e '#!/bin/sh'"\n${BIN} "'+set fs_basepath "'${DATA}'" "$@"' > "${BIN_NAME}"

		dobin "${BIN_NAME}"
	else
		dosym "${BIN}" /usr/$( exhost --target )/bin/${BIN_NAME}
	fi
}

src_install()
{
	if optionq data
	then
		local	DATA=/usr/share/games/${PN}/

		einfo	'Copying q3rally data to '${DATA}'. This could take several minutes.'

		insinto ${DATA}
			doins -r baseq3r
	fi
	if optionq server || optionq engine
	then
		local	OUT=engine/build/release-linux-${ARCH}/${PN}
		local	INST=/usr/$( exhost --target )/share/games/${PN}

		mkdir -p "${IMAGE}"/usr/$( exhost --target )/bin

		exeinto ${INST}
			doexe ${OUT}_rend2

		optionq server && doexe ${OUT}-server	&& dogamebin -server
		optionq engine && doexe ${OUT}			&& dogamebin
	fi
}